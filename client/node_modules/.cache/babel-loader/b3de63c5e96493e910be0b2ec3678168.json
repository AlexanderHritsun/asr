{"ast":null,"code":"var _jsxFileName = \"/Users/alexander_hritsun/WebstormProjects/asr/client/src/pages/Services/index.jsx\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Card, Button } from 'react-bootstrap';\nimport BeautyStars from \"beauty-stars\";\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport { ServiceCard } from \"./ServiceCard\";\nimport { useHttp } from \"../../hooks/http.hook\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { Spinner } from \"../../components/Loader\";\n\nfunction Services() {\n  const {\n    search\n  } = useLocation();\n  const [services, setServices] = useState([]);\n  const {\n    loading,\n    request\n  } = useHttp();\n  const {\n    token\n  } = useContext(AuthContext);\n  const fetchServices = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/services${search}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setServices(fetched);\n    } catch (e) {}\n  }, [token, request, search]);\n  useEffect(() => {\n    fetchServices();\n  }, [fetchServices]);\n\n  const handleServiceActionPerformed = () => {\n    fetchServices();\n  };\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(ServiceCard, {\n    services: services,\n    onActionPerformed: handleServiceActionPerformed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default Services;","map":{"version":3,"sources":["/Users/alexander_hritsun/WebstormProjects/asr/client/src/pages/Services/index.jsx"],"names":["React","useCallback","useContext","useEffect","useState","Card","Button","BeautyStars","NavLink","useLocation","ServiceCard","useHttp","AuthContext","Spinner","Services","search","services","setServices","loading","request","token","fetchServices","fetched","Authorization","e","handleServiceActionPerformed"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,QAAkE,OAAlE;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,iBAA7B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,kBAArC;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,SAAQC,WAAR,QAA0B,2BAA1B;AACA,SAAQC,OAAR,QAAsB,yBAAtB;;AAEA,SAASC,QAAT,GAAoB;AAChB,QAAM;AAAEC,IAAAA;AAAF,MAAaN,WAAW,EAA9B;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAACc,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBR,OAAO,EAAlC;AACA,QAAM;AAACS,IAAAA;AAAD,MAAUlB,UAAU,CAACU,WAAD,CAA1B;AAEA,QAAMS,aAAa,GAAGpB,WAAW,CAAC,YAAY;AAC1C,QAAI;AACA,YAAMqB,OAAO,GAAG,MAAMH,OAAO,CAAE,gBAAeJ,MAAO,EAAxB,EAA2B,KAA3B,EAAkC,IAAlC,EAAwC;AACjEQ,QAAAA,aAAa,EAAG,UAASH,KAAM;AADkC,OAAxC,CAA7B;AAGAH,MAAAA,WAAW,CAACK,OAAD,CAAX;AACH,KALD,CAKE,OAAOE,CAAP,EAAU,CAAE;AACjB,GAPgC,EAO9B,CAACJ,KAAD,EAAQD,OAAR,EAAiBJ,MAAjB,CAP8B,CAAjC;AASAZ,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,aAAa;AAChB,GAFQ,EAEN,CAACA,aAAD,CAFM,CAAT;;AAIA,QAAMI,4BAA4B,GAAG,MAAM;AACvCJ,IAAAA,aAAa;AAChB,GAFD;;AAIA,MAAIH,OAAJ,EAAa;AACT,wBAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAED,sBACI,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAEF,QAAvB;AAAiC,IAAA,iBAAiB,EAAES,4BAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH;;AAED,eAAeX,QAAf","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from \"react\";\nimport { Card, Button } from 'react-bootstrap';\nimport BeautyStars from \"beauty-stars\";\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport {ServiceCard} from \"./ServiceCard\";\nimport {useHttp} from \"../../hooks/http.hook\";\nimport {AuthContext} from \"../../context/AuthContext\";\nimport {Spinner} from \"../../components/Loader\";\n\nfunction Services() {\n    const { search } = useLocation();\n    const [services, setServices] = useState([])\n    const {loading, request} = useHttp()\n    const {token} = useContext(AuthContext)\n\n    const fetchServices = useCallback(async () => {\n        try {\n            const fetched = await request(`/api/services${search}`, 'GET', null, {\n                Authorization: `Bearer ${token}`\n            })\n            setServices(fetched)\n        } catch (e) {}\n    }, [token, request, search])\n\n    useEffect(() => {\n        fetchServices()\n    }, [fetchServices])\n\n    const handleServiceActionPerformed = () => {\n        fetchServices()\n    }\n\n    if (loading) {\n        return <Spinner/>\n    }\n\n    return (\n        <ServiceCard services={services} onActionPerformed={handleServiceActionPerformed}/>\n    );\n}\n\nexport default Services;"]},"metadata":{},"sourceType":"module"}