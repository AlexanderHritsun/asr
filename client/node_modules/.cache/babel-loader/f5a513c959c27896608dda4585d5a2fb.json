{"ast":null,"code":"import { useState, useCallback, useContext } from 'react';\nimport { AuthContext } from \"context/AuthContext\";\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const auth = useContext(AuthContext);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n\n      if (response.status === 401) {\n        auth.logout();\n      }\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Что-то пошло не так');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};","map":{"version":3,"sources":["/Users/alexander_hritsun/WebstormProjects/asr/client/src/hooks/http.hook.js"],"names":["useState","useCallback","useContext","AuthContext","useHttp","loading","setLoading","error","setError","auth","request","url","method","body","headers","JSON","stringify","response","fetch","status","logout","data","json","ok","Error","message","e","clearError"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,WAAlB,EAA+BC,UAA/B,QAAgD,OAAhD;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMS,IAAI,GAAGP,UAAU,CAACC,WAAD,CAAvB;AAEA,QAAMO,OAAO,GAAGT,WAAW,CAAC,OAAOU,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA0D;AAClFR,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,UAAIO,IAAJ,EAAU;AACNA,QAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAC,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACH;;AAED,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAN,CAA5B;;AAEA,UAAIG,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzBV,QAAAA,IAAI,CAACW,MAAL;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AAEA,UAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,qBAA1B,CAAN;AACH;;AAEDnB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEA,aAAOe,IAAP;AACH,KArBD,CAqBE,OAAOK,CAAP,EAAU;AACRpB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACkB,CAAC,CAACD,OAAH,CAAR;AACA,YAAMC,CAAN;AACH;AACJ,GA5B0B,EA4BxB,EA5BwB,CAA3B;AA8BA,QAAMC,UAAU,GAAG1B,WAAW,CAAC,MAAMO,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAA9B;AAEA,SAAO;AAAEH,IAAAA,OAAF;AAAWK,IAAAA,OAAX;AAAoBH,IAAAA,KAApB;AAA2BoB,IAAAA;AAA3B,GAAP;AACH,CAtCM","sourcesContent":["import {useState, useCallback, useContext} from 'react'\nimport { AuthContext } from \"context/AuthContext\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(null)\n    const auth = useContext(AuthContext)\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n        setLoading(true)\n        try {\n            if (body) {\n                body = JSON.stringify(body)\n                headers['Content-Type'] = 'application/json'\n            }\n\n            const response = await fetch(url, {method, body, headers})\n            \n            if (response.status === 401) {\n                auth.logout()\n            }\n\n            const data = await response.json()\n            \n            if (!response.ok) {\n                throw new Error(data.message || 'Что-то пошло не так')\n            }\n\n            setLoading(false)\n\n            return data\n        } catch (e) {\n            setLoading(false)\n            setError(e.message)\n            throw e\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), [])\n\n    return { loading, request, error, clearError }\n}\n"]},"metadata":{},"sourceType":"module"}